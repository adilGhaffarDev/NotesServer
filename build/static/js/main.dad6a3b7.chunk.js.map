{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"6LAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCe3B,EArBA,WACb,IAAMI,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNR,WAAW,GAEb,OAAOG,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAdR,aAcsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,aAmBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC+D5BK,EAhFH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAC5B,iBAJc,mBAGTG,EAHS,KAGAC,EAHA,OAMcJ,oBAAS,GANvB,mBAMTK,EANS,KAMAC,EANA,KAOhBC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACJP,EAASO,QAEZ,IAEH,IAgBMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAA/B,GAAI,OAAuB,IAAnBA,EAAKG,aAsB9B,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMqB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACCK,EAAYE,KAAI,SAAAhC,GAAI,OACjB,kBAAC,EAAD,CAAMiC,IAAKjC,EAAKU,GAAIV,KAAMA,EAAMC,iBAAkB,kBAlD/B,SAAAS,GACzB,IAAMV,EAAOqB,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KAChC0B,EAAW,2BAAQpC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDyB,EACUlB,EAAI0B,GACXxB,MAAK,SAAAyB,GACJf,EAASD,EAAMW,KAAI,SAAAhC,GAAI,OAAIA,EAAKU,KAAOA,EAAKV,EAAOqC,SAEpDC,OAAM,SAAAC,GACHC,MAAM,aAAD,OACUxC,EAAKI,QADf,sCAGLkB,EAASD,EAAMU,QAAO,SAAAI,GAAC,OAAIA,EAAEzB,KAAOA,SAqCoB+B,CAAmBzC,EAAKU,WAIpF,0BAAMgC,SAlCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBzC,QAASmB,EACTZ,MAAM,IAAImC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,GAC3BvC,GAAIW,EAAM6B,OAAS,GAErBtB,EACUiB,GACPjC,MAAK,SAAAyB,GACJf,EAASD,EAAMN,OAAOsB,IACtBb,EAAW,SAuBX,2BACE2B,MAAO5B,EACP6B,SAtBiB,SAACT,GACxBU,QAAQC,IAAIX,EAAMY,OAAOJ,OACzB3B,EAAWmB,EAAMY,OAAOJ,UAsBpB,4BAAQK,KAAK,UAAb,WC1ERC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.dad6a3b7.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  )\n  const [showAll, setShowAll] = useState(true)\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important\n  }\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n      .catch(error => {\n          alert(\n            `the note '${note.content}' was already deleted from server`\n          )\n          setNotes(notes.filter(n => n.id !== id))\n        })\n  }\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n      {notesToShow.map(note =>\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}